This contains all information pertaining to the manuscripts "Segmentation of Noisy Signals Generated by a Nanopore", and "Analysis of Nanopore Data using Hidden Markov Models," by Jacob Schreiber and Kevin Karplus.

13 data files, recording 12.5 minutes each, had events detected and segmented automatically. These results are stored in the appropriately named JSON files. PyPore can be used to open these files, using the File.from_json( filename ) class method.

Here is some example code for going through the files and plotting each of the events, assuming the jsons are in the same directory as your script:

```
from PyPore.DataTypes import *
from matplotlib import pyplot as plt
import glob

for json in glob.glob( '*.json' ):
	file = File.from_json( json )
	for event in file.events:
		event.plot( color='cycle' )
		plt.show()
```

This will produce plots of the events one at a time, colored in a four-color cycle. If you find that color cycle ugly, you can pass `color_cycle = [...]` into `event.plot`, where color_cycle is a list of matplotlib-acceptable colors.	

The plots are of MetaEvents, which is just metadata about the event and its corresponding segments. The raw ionic current data is available upon request, but not suitable for online hosting. The plots show the mean of each segment, and fading colors based on one, two, and three standard deviations from the mean. 


Tutorials on how to use PyPore, and how to replicate the analysis of the second paper, are done respectively in PyPore Tutorial.ipynb and Cytosine Classification.ipynb. These are ipython notebooks, which can be run interactively using ipython, or viewed online at  http://nbviewer.ipython.org/github/UCSCNanopore/Data/blob/master/Automation/PyPore%20Tutorial.ipynb or http://nbviewer.ipython.org/github/UCSCNanopore/Data/blob/master/Automation/Cytosine%20Classification.ipynb
respectively. 

Test Set.csv is the results of running all test set events through the model, and can be loaded up in Python easily using Pandas, or any other tool which allows loading from a csv file. 

epigenetics.py is the python script which contains several functions used to build and test the model. An important note is that the function EpigeneticsHMM will return a model with several states having their underlying distribution tied, as YAHMM was updated to include this function after the script was written. Writing a YAHMM model out removes the tied states, and so by reading the untrained_hmm.txt file using Model.read( <stream of untrained_hmm.txt> ) can the model used in the papers be recovered.

n_fold_accuracies.txt is the output of the 5-fold cross-validation 10 times used in Fig 7. This can be read easily using numpy, if other statistics are desired.

threshold_scan.txt is the output used in Fig 4, generated by the function threshold_scan. The accuracies use thresholds 0.01, 0.02, 0.05, 0.1, 0.2, 0.5, 0.75, 0.9 respectively. This can also be read easily using numpy.

untrained_hmm.txt is a text representation of the model used, and can easily be read in by YAHMM to replicate the analyses. An example of doing this is shown in Cytosine Classification.ipynb. 